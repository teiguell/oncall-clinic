Quiero implementar el flujo de registro e inicio de sesi√≥n para pacientes en mi aplicaci√≥n web usando React + Node.js + MongoDB.

üìå Requisitos clave:
- Registro con email + contrase√±a.
- Alternativamente, iniciar sesi√≥n con cuenta de Google o Apple (OAuth2).
- Requiere verificaci√≥n en dos pasos (2FA) mediante email o SMS al iniciar sesi√≥n o registrarse.

üéØ Funcionalidad esperada:

1. Frontend:
   - Formulario de registro con:
     - Nombre completo (obligatorio)
     - Email (que actuar√° como nombre de usuario)
     - Contrase√±a
     - Opci√≥n de registrarse con Google o Apple.
   - Validaci√≥n b√°sica (email v√°lido, contrase√±a segura).
   - Al registrarse, enviar c√≥digo de verificaci√≥n por email o SMS.
   - Pantalla para ingresar el c√≥digo de verificaci√≥n (2FA).
   - Solo se permite el acceso tras verificaci√≥n exitosa.
   - Pantalla de login con las mismas opciones.

2. Backend:
   - Endpoint `POST /api/register/patient` para crear paciente.
     - Generar c√≥digo de verificaci√≥n aleatorio (por ejemplo, 6 d√≠gitos).
     - Enviar c√≥digo por email o SMS (puedes simular por ahora).
     - Guardar en base de datos como `verificationCode` + `expiresAt`.
   - Endpoint `POST /api/verify-code` para validar el c√≥digo recibido.
     - Si el c√≥digo es correcto y no ha expirado ‚Üí activar cuenta.
   - Guardar paciente con estructura:
     ```ts
     {
       fullName: string,
       email: string,
       passwordHash: string,
       isVerified: boolean,
       createdAt: Date
     }
     ```
   - Soporte de autenticaci√≥n con JWT.
   - Login con email/contrase√±a o con Google/Apple OAuth2.

3. Seguridad:
   - Encriptar contrase√±as con bcrypt.
   - El c√≥digo de verificaci√≥n debe tener expiraci√≥n (ej. 10 minutos).
   - No permitir login si `isVerified: false`.

4. Escalabilidad:
   - El sistema debe ser compatible con futuros m√©todos de verificaci√≥n (por ejemplo, WhatsApp o TOTP).
   - En el futuro se podr√° a√±adir direcci√≥n, tel√©fono y foto de perfil, pero no es obligatorio ahora.

Organiza el c√≥digo con buenas pr√°cticas y separaci√≥n por m√≥dulos (`auth`, `patients`, `verification`, etc.).
